h3. A new app

Create a new grails application. On the command line type:

{code}
grails create-app schedim
{code}

Of course, it would be nice if you were to come up with your own name instead of Schedim ;)
Schedim are a kind of mythological creatures from the Kabbalah (elemental spirits). 

Grails creates a new application in a folder by the given name (schedim). Open the application
in your favorite IDE, for example Eclipse STS or IntelliJ IDEA. It is also a good idea to
create a repository for the software in a source code management system like git or subversion.
If you got your game in a SCM (and keep backups...), you do not have to fear losing your code
or breaking it beyond repair by making changes to it.

Your new grails application should start out looking like this:

!game/new_grails_app.png!

In the new application, open grails-app/conf/BuildConfig.groovy and add the line

{code}
    compile \":goblin:3.0.2\"
{code}

to the dependencies closure.

If you now type

{code}

    grails
    // waiting some time
    grails run-app
    // waiting some more

{code}

You will see a message like "Server running. Browse to http://localhost:8080/schedim"
If you visit this URL, you will see something like the following:

!game/raw_game.png!

The many controllers are provided by Little Goblin. But since the database is still empty
and no start page has been defined, we still have some work to do.

h3. Landing page configuration

As you can see, the default page of the new game leaves something to be desired. But we can
redirect visitors from the base URL to a page of our own choosing.
 
In the file grails-app/conf/UrlMappings.groovy, modify the static mappings definition:
 
{code}
class UrlMappings {
    static mappings = {
      "/$controller/$action?/$id?"{
	      constraints {
              
		  }
	  }
      "/"(view:"/portal/landing")
	  "500"(view:'/error')
	}
}
{code}

Now, if you visit http://localhost:8080/schedim, you should be redirected to the Little Goblin's
default [landing page|guide:landing]:

!game/first_landing_page.png!

This still does not look like the test server's page, but it's a start.

h3. Database installation

You may run your game entirely from RAM without any persistent database installed.
But while this is great for testing (you get a new database with every start), for a
production setting it will probably be less than ideal, because you loose your entire game state
once the server shuts down.

If you want to go beyond an in-memory setup, you should install a proper database like 
"Postgresql":http://www.postgresql.org - this is easy to setup. On Windows, you can use PgAdmin 
which comes with the database executable to setup a first database called schedim, with 
 a user goblin and password goblin.
 
If you decide to go with Postgresql (you could also use MySQL or MS-SQLserver etc),
please add the following postgresql driver to you dependencies closure in BuildConfig.groovy:

{code}
    dependencies{    
        // automatically download and install the Postgresql driver:
        runtime 'postgresql:postgresql:9.1-901.jdbc4'
        // or use the MySQL one:
        // runtime 'mysql:mysql-connector-java:5.1.20'
    }
{code}

Please note that depending on the Postgresql or Mysql configuration, you may need to allow
connections from localhost:
 
{code} 
 --- in pg_hba.conf: add a separate line:
 host	schedim	     all	127.0.0.1/32	      trust
{code} 
 
h3. Database configuration

Next you will need to configure the connection to the database. This is stored in /grails-app/conf/DataSource.groovy

There are three distinct environments under which your game will be running - 

* development, which means you run it via run-app from the Grails console.
* test, during testing the game will be running with the in-memory H2 database (leave settings as-are).
* production, which is activated when the schedim.war is deployed into a Tomcat (or other) server. 

Add the following settings to your DataSource.groovy:

{code}
environments{
    development {
		dataSource {
			dbCreate = "update"
			pooling = true
			logSql = false
			driverClassName = "org.postgresql.Driver"
            dialect = "org.hibernate.dialect.PostgreSQLDialect"
            url = "jdbc:postgresql://127.0.0.1:5432/schedim"			
			username = 'goblin'
			password = 'goblin'
		}
		
	}

	production {
		dataSource {
			dbCreate = "update"
			pooling = true
            logSql = false
           
            driverClassName = "org.postgresql.Driver"
            dialect = "org.hibernate.dialect.PostgreSQLDialect"
            url = "jdbc:postgresql://127.0.0.1:5432/schedim"
			username = 'goblin'
			password = 'goblin'
            autoReconnect = true
            properties {
                maxActive = -1
                minEvictableIdleTimeMillis=1800000
                timeBetweenEvictionRunsMillis=1800000
                numTestsPerEvictionRun=3
                testOnBorrow=true
                testWhileIdle=true
                testOnReturn=true
                validationQuery="SELECT 1"
            }
		}
	}
}
{code}

If you are using MySQL, use the following lines: 

{code}

		driverClassName = "com.mysql.jdbc.Driver"
		dialect = 'org.hibernate.dialect.MySQL5InnoDBDialect'
		url = "jdbc:mysql://localhost:3306/schedim"

{code}

Note the setting for dbCreate: currently they are all set to update,
so that Grails tries to add anything new you create. It should not delete
any database tables or otherwise break something, just add new stuff.

Once you have a production-ready game, you should set dbCreate to 'none'
in the production environment settings.

h3. Security configuration

Little Goblin uses the Grails Spring Security Plugin to enable authentication and authorization of
 users. You may of course decide to use another security mechanism (or write a game that does not
 require a login...) but I recommend you just use the following settings in your Config.groovy - 
 after all, Little Goblin is about reducing the time for setup.
 
{code}

 grails.plugins.springsecurity.userLookup.userDomainClassName = 'de.dewarim.goblin.UserAccount'
 grails.plugins.springsecurity.userLookup.authorityJoinClassName = 'de.dewarim.goblin.UserRole'
 grails.plugins.springsecurity.authority.className = 'de.dewarim.goblin.Role'
 grails.plugins.springsecurity.userLookup.passwordPropertyName = 'passwd'
 grails.plugins.springsecurity.authority.nameField = 'name'
 grails.plugins.springsecurity.successHandler.defaultTargetUrl = '/portal/start'
 grails.plugins.springsecurity.dao.reflectionSaltSourceProperty = 'username'

{code}

You may have noticed the defaultTargetUrl: by changing this you can determine to which page a user
 will be redirected after login by default. In this case it's the start action of the portal controller.  

If you now visit the login page and try to login with the default test user,
you will see an error message - which is perfectly ok at this moment, since there are no users
in the database. 

!game/first_failed_login.png!
First failed login: your game is secure...

h3. Adding data

At the moment, your database is completely empty - it should contain just the tables for the 
Little Goblin domain classes, but not a single row of data. That is about to change...

// TODO